# -*- coding: utf-8 -*-
"""Amrutha0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LOi-pF0t8tm40G97oqahgK_VwPk_YcSm
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import os
for dirname, _, filenames in os.walk('/input'):
    for filename in filenames:
        print(os.path.join('/content/healthcare-dataset-stroke-data.csv'))
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import roc_auc_score
from sklearn.metrics import roc_curve
from sklearn.metrics import f1_score
from sklearn.metrics import auc

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv(os.path.join('/content/healthcare-dataset-stroke-data.csv'))
df.head()

df.drop(columns = ['id'], inplace = True)
df.head()

df.apply(lambda x: sum(x.isnull()),axis=0)
df.dropna(inplace=True)

df.apply(lambda x: sum(x.isnull()),axis=0)

sns.countplot(x="stroke", data=df, palette="bwr")
plt.show()

sns.countplot(x="hypertension", data=df, palette="rocket")
plt.show()

sns.countplot(x="gender", data=df, palette="deep")
plt.show()

df['gender'].value_counts()

Others = df[(df['gender'] == 'Other')].index
df.drop(Others , inplace=True)
df["gender"] = df["gender"].astype('category')
df["gender"] = df["gender"].cat.codes
df["ever_married"] = df["ever_married"].astype('category')
df["ever_married"] = df["ever_married"].cat.codes
df['work_type'].value_counts()

df = pd.get_dummies(df, prefix=['w_type'], columns=['work_type'])
df['smoking_status'] = df['smoking_status'].map(
                   {'formerly smoked':1 ,'smokes':1,'never smoked':0,'Unknown':0})
df['Residence_type'].value_counts()

from sklearn.linear_model import LogisticRegression
def XYsplit(df, label_col):
    y = df[label_col].copy()
    X = df.drop(label_col,axis=1)
    return X,y
X,y = XYsplit(df,'stroke')
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3,random_state=0)
LogReg = LogisticRegression(max_iter=1000)
LogReg.fit(X_train,y_train)

predictions = LogReg.predict(X_test)
accuracy = accuracy_score(y_test, predictions)*100
precision = precision_score(y_test, predictions,pos_label=1,labels=[0,1])*100
recall = recall_score(y_test, predictions,pos_label=1,labels=[0,1])*100
fpr , tpr, _ = roc_curve(y_test, predictions)
auc_val = auc(fpr, tpr)
f_score = f1_score(y_test, predictions)

print("Accuracy: \n", accuracy)
print("Precision of event Happening: \n", precision)
print("Recall of event Happening: \n", recall)
print("AUC: \n",auc_val)
print("F-Score:\n", f_score)
plt.title('ROC Curve')
plt.plot(fpr, tpr, label='AUC = {:.2f}'.format(auc_val))
plt.plot([0,1],[0,1],'r--')
plt.xlim([-0.1,1.1])
plt.ylim([-0.1,1.1])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.legend(loc='lower right')
plt.show()

print("Confusion Matrix: \n", confusion_matrix(y_test, predictions,labels=[0,1]))